Samuel Anspach
Lessons Learned for GIT
Udemy
______________________________________________________________

1) How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

	I suppose I could have better access to historical information about programs I have written.
	I could see when errors might have arisen just by seeing how the code had changed.




2) As a programmer, when would you want to have a version of your code saved?

	I definitely would want to be able to choose when to save my code. Additionally, it would be nice to have it
	save whenever their is a large enough change - maybe automatically without me looking.



3) What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git,
vs having versions automatically saved, like Google Docs does?

   -  I would have the final say in what is an important change vs. a minor change.
   -  If I suck as logging work, I would be at a higher risk of losing my progress.
   -  Autosaving is a bit like insurance, I don't need to worry about a computer crashing.



4) What do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

	I honestly think it's just how the database of objects is setup. Additionally, Other version control systems
	might deal less with integrated files like coding programs.



5) How can you use the commands git log and git diff to view the history of files?

	git log will show you an entire history of a repository - it will have a unique key for every change.
	git diff can be used to compare two different log entries



6) How might using version control make you more confident to make changes that could break something?

	Way more confident - I can always just got back to a previous stat of the code where it was working. It 
	makes troubleshooting way more methodical.



7) Now that you have your workspace set up, what do you want to try using Git for?

	Can I create repository to hold versions of some webscraping Python scripts that I've written?



8) How can you use the staging area to make sure you have one commit per logical change?

	In the staging area you can see what is pending the commit and make sure that there is only one thing in there.
	Not sure how to remove things from the stage though - or I don't remember.



9) What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	I like that you could have multiple versions of the code both available and compare potentially big functional changes.
	It doesn't really have a purpose when it comes to bug fixes or updates - I feel like branches are only for the bigger changes.



10) How do the diagrams help you visualize the branch structure?

	Humans are visual - a graph makes understanding how a tree/branch like diagram opens up a different sections.



11) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	
	We take ALL the commits from one of them, and JAM them FORCEFULLY into the first listed branch. We represent it as a new
	point between the two because it takes from both of the prior commits/parents.



12) What are the pros and cons of Git’s automatic merging vs. always doing merges manually?

	Automatic merging makes it less tedious to combine/"Smush" two files together. That being said,
	it does mean less control and I suppose their is some room for error


