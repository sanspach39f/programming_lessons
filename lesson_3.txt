Samuel Anspach
Udemy Git Training 
Lesson 3
______________________________________________________________________________________________
______________________________________________________________________________________________

Table of Contents:

- Functions and Explanations

- Lessons Learned




Functions and Explanations
______________________________________________________________________________________________

git status - Check to see what branch you are on, what will get committed, what won't be committed

git init - Create a repository in the current directory

git log (--graph) (--oneline) - Display a list of commits. If a branch name is list, a comprehensive
				list will be display, if a commit ID is entered, a list up to that ID
				will be displayed. More options can be added to improve readability.

git clone - 

git branch - 

git checkout - Move your terminal to look at the files at the state that your referrence. You can enter in
		a branch name or the actual log id.

git remote (-add) - 

git fetch - 

git pull - 

git push - 

git add - 

git commit - 


Lesson Learned
______________________________________________________________________________________________


1) When would you want to use a remote repository rather than keeping all your work local?

	If I expect to be using multiple computers for one project or if it is a big project being 
	worked on by multiple programmers.



2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	I don't really know.If we are constantly staying up-to-date with the remote and it is CONSTANTLY
	being edited by other programmers, it can get tedious trying to keep up with the changes and code,
	especially if it's not relevant to what we are specifically working on



3) Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks are when you want to take a repository in GitHub and copy it onto your repository in GitHub.
	Clones let you take a repository on Github or somewhere on your computer and add it to your current directory.
	Branches let you take a repository on your local computer and generate a new copy of it to experiment with.



4) What is the benefit of having a copy of the last known state of the remote stored locally?

	If you really mess up your current master/branch that you are working on, you can just go back to the previous version.
	Not sure what else is helpful about it.



5) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Uhhhhhhhhh......I don't have a great answer for this.
	Google Docs?
	Google Script? That's only for G-Script....
	X:Drive on a local drive? Only can do if we are on the same network...
	I have NO Idea...


6) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	You can audit each other's work before commit it. It's just like the lesson explained,
	you can control what actually makes it's way to the master branch.


_____________________________________________________________________________________________
<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><
_____________________________________________________________________________________________

